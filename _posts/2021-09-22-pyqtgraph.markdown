---
layout: post
title: "Pyqtgraph 中文文档"
subtitle: "本文是对pyqtgraph英文文档的中文翻译 原文档链接：https://pyqtgraph.readthedocs.io/en/latest/introduction.html"
date: 2021-09-22
author: 七月
category: books
tags: 技术文档 翻译 可视化 python
finished: false
---

## 目录

[TOC]

## 简介

### 什么是pyqtgraph? ###

PyQtG是一个提供工程和科学应用程序中常用功能的用于python环境的图形和用户界面库。它的主要目标是：1）提供用于显示数据（数据、视频等）的快速、交互式图形。2）提供帮助快速应用开发（例如Qt Designer的属性树）的工具。

PyQtGraph 大量使用Qt GUI平台（通过PyQt 或者 PySide）实现高性能图形，同时大量使用numpy实现大量的数字处理。特别是，pyqtgraph使用了QT的GraphicsView框架，这个框架本事就是一个非常强大的图形系统；我们对这个框架做了优化和简化，使得用户可以通过最少的操作来实现数据可视化。

Pqtgraph 可以在 Linux, Windows， 和OSX三个平台上运行。

### 它能做什么 ? ###

pyqtgraph 的核心功能如下：

- 基本数据可视化操作：图像、线图和散点图
- 视频/线图的实时更新
- 交互式缩放/平移，平均，FFT，SVG/PNG导出
- 标记/选择绘图区域
- 标记/选择感兴趣的图像区域和对多维图像数据自动切片
- 用于构建自定义图像感兴趣区域部件的框架
- 取代/补充Qt的对接系统，允许更复杂（和更可预测）的对接安排
- 快速原型化动态界面的参数树部件（类似于Qt Desinger 和许多其他应用程序中的属性树）

### 示例 ###

PyQtGraph 提供了大量的例子，可以通过命令 ` python -m pyqtgraph.examples ` 或者如下代码访问。

```python
import pyqtgraph.examples
pyqtgraph.exmaples.run()
```

如果这个项目仓库在本地，可以通过在根目录下运行`python examples/` 来查看示例。

上述命令或者代码会启动一个带有示例列表的启动器。从列表中选择一个项目以查看其源代码，并双击一个项目以运行示例。

![image-20210922104154313](/Users/Rosanne/Documents/GitHub/Rosanne-Luo.github.io/img/2021-09-22-pyqtgraph//image-20210922104154313.png)

注意，如果你是通过`python setup.py develop`命令来安装pyqtgraph的，那么示例会被作为最上层模块。这种情况下，要用`import examples; examples.run()`。

### 和别的工具比...

- matplotlib：对于绘图，pyqtgraph 不像matplotlib那样完整/成熟, 但是它运行速度更快。Matplotlib更倾向于制作出版物质量的图形，而pyqtgraph 是用于数据采集和分析应用程序。Matplotlib 对于matlab程序员来说更加直观；Pyqtgraph 对于python/qt程序员来说更加直观。据我所知，Matplotlib 不包括许多pyqtgraph拥有的特性，例如图像交互、体积渲染、参数树、流程图等。
- pyqwt5：几乎个pyqtgraph 一样快，但是在绘图功能上不完整。pyqtgraph中的图像处理要完整得多（同样的，qwt中没有ROI部件）。另外，pyqtgraph 是用纯python编写的，所以比pyqwt更容易一直，而pyqwt在开发过程中往往落后于pyqt(我最初使用pyqwt，但是后来觉得我的项目中依赖它太麻烦了)。据我所知，与matplotlib一样，pyqwt不包括许多pyqtgraph拥有的特性，如图像交互、体积渲染、参数树、流程图等。

（我使用这些库的经验有些过时了；如果我说错了，请纠正我）

## 鼠标交互

大多数使用pyqtgraph实现数据可视化的应用程序都会生成一个可以使用鼠标交互式缩放、平移和配置的部件。本节介绍鼠标与这些部件的交互。

### 2D 图形

在pyqtgraph里，大多数2D 可视化都有如下的鼠标交互操作：

- 鼠标左键：与场景中的物体进行交互（选择/移动物体等）。如果鼠标光标下没有可移动的物体，那么拖动鼠标左键将会平移场景。
- 鼠标右键拖拽：缩放场景。按住鼠标右键左右拖动会在水平方向上缩放场景，上下拖动会在垂直方向上缩放场景（虽然有些场景的X/Y轴坐标是绑定在一起的）。如果场景中X/Y轴可见，那么在轴上拖拽只会影响这个轴。
- 鼠标右键点击：大多数情况下点击鼠标右键会显示一个上下文菜单，该菜单根据鼠标光标下的对象提供各种选项。
- 中间按钮（滚轮）拖拽：按住滚轮拖动鼠标总是会移动场景（当使用左键移动被其他物体组织的情况下很有用）。
- 滚轮转动：缩放场景

对于那些通过鼠标右键或者中间按钮拖动比较困难的机器（例如MAC)，有另一种鼠标交互模式。在这种模式下，按住鼠标左键拖动会在场景上绘制一个方框。当按钮被释放后，场景被缩放和平移以适应这个方框。这个模式可以通过上下文菜单或者如下调用来访问：

```python
pyqtgraph.setConfigOption('leftButtonPan', False)
```

### 上下文菜单

大多数场景下点击鼠标右键会显示一个上下文菜单，其中有各种选项可以修改场景的行为。一些可用的选项有：

- 启用或者禁止当数据方位改变时自动缩放
- 多视图的坐标轴链接在一起
- 启动或者禁止每个轴的鼠标交互
- 显示地设置可见范围值

菜单中确切的可用选项取决于场景的内容和所点击的对象。

### 3D 图形

3D可视化使用下面的鼠标交互：

- 左键拖动：围绕中心点旋转场景
- 中间按钮拖动：通过在X-Y平面内移动中心“观察”点来平移场景
- 按住CTRL键的同时拖动中间按钮：通过沿着Z轴移动中心“观察点”来平移场景
- 滚轮转动：缩放场景
- 滚轮+CTRL：改变视场角

还有键盘控制：

- 方向键围绕中心点旋转，就像拖动鼠标左键一样







